---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  annotations:
    notifications.argoproj.io/subscribe.on-rollout-completed.slack: staging-monitoring
    notifications.argoproj.io/subscribe.on-rollout-step-completed.slack: staging-monitoring
    notifications.argoproj.io/subscribe.on-rollout-updated.slack: staging-monitoring
    notifications.argoproj.io/subscribe.on-scaling-replicas-set.slack: staging-monitoring

  name: simple-rollout
spec:
  replicas: 2
  strategy:
    blueGreen:
      analysis:
        templateName: loq-error-rate
        args:
        - name: service-name
          value: staging-mainapi
      activeMetadata:
        labels:
          role: active
      previewMetadata:
        labels:
          role: preview
      # activeService specifies the service to update with the new template hash at time of promotion.
      # This field is mandatory for the blueGreen update strategy.    
      activeService: rollout-bluegreen-active
      # previewService specifies the service to update with the new template hash before promotion.
      # This allows the preview stack to be reachable without serving production traffic.
      # This field is optional.      
      previewService: rollout-bluegreen-preview
      # autoPromotionEnabled disables automated promotion of the new stack by pausing the rollout
      # immediately before the promotion. If omitted, the default behavior is to promote the new
      # stack as soon as the ReplicaSet are completely ready/available.
      # Rollouts can be resumed using: `kubectl argo rollouts promote ROLLOUT`      
      autoPromotionEnabled: true
      autoPromotionSeconds: 60
      previewReplicaCount: 1
      scaleDownDelaySeconds: 30
      scaleDownDelayRevisionLimit: 10
  revisionHistoryLimit: 2000
  selector:
    matchLabels:
      app: trivial-go-web-app
  template:
    metadata:
      labels:
        app: trivial-go-web-app
    spec:
      containers:
      - name: webserver-simple
        image: nginx:1.7.11
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
